// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OAuthServer.NET.Core.Data;

namespace OAuthServer.NET.Core.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210108162307_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.AuthorizationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("RedirectURI")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("ApplicationUserId", "ClientId", "Code", "RedirectURI")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL AND [Code] IS NOT NULL AND [RedirectURI] IS NOT NULL");

                    b.ToTable("AuthorizationCodes");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowRememberLogin")
                        .HasColumnType("bit");

                    b.Property<string>("Audience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableExternalLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("EnabledLocalLogin")
                        .HasColumnType("bit");

                    b.Property<Guid>("GrantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IssueRefreshTokens")
                        .HasColumnType("bit");

                    b.Property<string>("IssuerURI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefreshTokenExpirationDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TokenExpirationMin")
                        .HasColumnType("int");

                    b.Property<bool>("ValidateAudience")
                        .HasColumnType("bit");

                    b.Property<bool>("ValidateCORS")
                        .HasColumnType("bit");

                    b.Property<bool>("ValidateIssuer")
                        .HasColumnType("bit");

                    b.Property<bool>("ValidateIssuerSigningKey")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("GrantId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.ClientCORSOrigin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OriginURI")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "OriginURI")
                        .IsUnique()
                        .HasFilter("[OriginURI] IS NOT NULL");

                    b.ToTable("ClientsCORSOrigins");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.ClientPostLogoutRedirectURI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostLogoutRedirectURI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientsPostLogoutRedirectURIs");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.ClientRedirectURI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RedirectURI")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "RedirectURI")
                        .IsUnique()
                        .HasFilter("[RedirectURI] IS NOT NULL");

                    b.ToTable("ClientsRedirectURIs");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.ClientScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScopeName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "ScopeName")
                        .IsUnique()
                        .HasFilter("[ScopeName] IS NOT NULL");

                    b.ToTable("Scopes");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.Grant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeResponseType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GrantName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenGrantType")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizeResponseType")
                        .IsUnique()
                        .HasFilter("[AuthorizeResponseType] IS NOT NULL");

                    b.HasIndex("GrantName")
                        .IsUnique()
                        .HasFilter("[GrantName] IS NOT NULL");

                    b.HasIndex("TokenGrantType")
                        .IsUnique()
                        .HasFilter("[TokenGrantType] IS NOT NULL");

                    b.ToTable("Grants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c7ac71f-2184-425c-ae0e-28e160872cd3"),
                            AuthorizeResponseType = "token",
                            GrantName = "Implicit",
                            Timestamp = new DateTime(2020, 12, 30, 12, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00951b77-fe6f-4995-982e-1909df5dabac"),
                            AuthorizeResponseType = "code",
                            GrantName = "Authorization Code",
                            Timestamp = new DateTime(2020, 12, 30, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            TokenGrantType = "authorization_code"
                        },
                        new
                        {
                            Id = new Guid("a51637cb-aaf4-45ea-a195-d6059b835345"),
                            GrantName = "Resource Owner Password",
                            Timestamp = new DateTime(2020, 12, 30, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            TokenGrantType = "password"
                        },
                        new
                        {
                            Id = new Guid("f320146f-7d07-4dc1-bad9-770e34702cb5"),
                            GrantName = "Client Credentials",
                            Timestamp = new DateTime(2020, 12, 30, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            TokenGrantType = "client_credentials"
                        });
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplacedByTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scopes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ReplacedByTokenId");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasFilter("[Token] IS NOT NULL");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OAuthServer.NET.Core.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OAuthServer.NET.Core.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAuthServer.NET.Core.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OAuthServer.NET.Core.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.AuthorizationCode", b =>
                {
                    b.HasOne("OAuthServer.NET.Core.Models.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("AuthorizationCodes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("OAuthServer.NET.Core.Models.Entities.Client", "Client")
                        .WithMany("AuthorizationCodes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.Client", b =>
                {
                    b.HasOne("OAuthServer.NET.Core.Models.Entities.Grant", "Grant")
                        .WithMany("Clients")
                        .HasForeignKey("GrantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grant");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.ClientCORSOrigin", b =>
                {
                    b.HasOne("OAuthServer.NET.Core.Models.Entities.Client", "Client")
                        .WithMany("ClientCORSOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.ClientPostLogoutRedirectURI", b =>
                {
                    b.HasOne("OAuthServer.NET.Core.Models.Entities.Client", "Client")
                        .WithMany("ClientPostLogoutRedirectURIs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.ClientRedirectURI", b =>
                {
                    b.HasOne("OAuthServer.NET.Core.Models.Entities.Client", "Client")
                        .WithMany("ClientRedirectURIs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.ClientScope", b =>
                {
                    b.HasOne("OAuthServer.NET.Core.Models.Entities.Client", "Client")
                        .WithMany("ClientScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("OAuthServer.NET.Core.Models.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("OAuthServer.NET.Core.Models.Entities.Client", "Client")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAuthServer.NET.Core.Models.Entities.RefreshToken", "ReplacedByToken")
                        .WithMany()
                        .HasForeignKey("ReplacedByTokenId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Client");

                    b.Navigation("ReplacedByToken");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.ApplicationUser", b =>
                {
                    b.Navigation("AuthorizationCodes");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.Client", b =>
                {
                    b.Navigation("AuthorizationCodes");

                    b.Navigation("ClientCORSOrigins");

                    b.Navigation("ClientPostLogoutRedirectURIs");

                    b.Navigation("ClientRedirectURIs");

                    b.Navigation("ClientScopes");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("OAuthServer.NET.Core.Models.Entities.Grant", b =>
                {
                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
