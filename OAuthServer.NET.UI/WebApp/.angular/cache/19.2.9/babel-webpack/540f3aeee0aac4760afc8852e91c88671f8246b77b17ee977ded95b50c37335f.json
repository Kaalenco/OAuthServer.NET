{"ast":null,"code":"import * as AppActions from './app.actions';\nexport function newState(state, newData) {\n  return Object.assign([], state, newData);\n}\nexport function clientsReducer(state = [], action) {\n  switch (action.type) {\n    case AppActions.SET_CLIENTS:\n      return newState(state, action.clients);\n    case AppActions.CREATE_CLIENT:\n      let addClientNewState = state.concat(action.client);\n      addClientNewState = addClientNewState.sort((a, b) => {\n        if (a.clientName > b.clientName) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      return newState(state, addClientNewState);\n    case AppActions.UPDATE_CLIENT:\n      const updateClientNewState = action.client;\n      const clientToModify = state.find(x => x.id === updateClientNewState.id);\n      const indexOfUpdate = state.indexOf(clientToModify);\n      return [...state.slice(0, indexOfUpdate), updateClientNewState, ...state.slice(indexOfUpdate + 1, state.length)];\n    case AppActions.REMOVE_CLIENT:\n      const idOfDelete = action.id;\n      const clientToDelete = state.find(x => x.id === idOfDelete);\n      const indexOfDelete = state.indexOf(clientToDelete);\n      return [...state.slice(0, indexOfDelete), ...state.slice(indexOfDelete + 1, state.length)];\n    case AppActions.CLEAR_CLIENTS:\n      return [];\n    default:\n      return state;\n  }\n}\nexport function clientsPostLogoutRedirectURIsreducer(state = [], action) {\n  switch (action.type) {\n    case AppActions.SET_CLIENTPOSTLOGOUTREDIRECTURIS:\n      return newState(state, action.clientPostLogoutRedirectURIs);\n    case AppActions.CREATE_CLIENTPOSTLOGOUTREDIRECTURI:\n      let addClientPostLogoutRedirectURINewState = state.concat(action.clientPostLogoutRedirectURI);\n      addClientPostLogoutRedirectURINewState = addClientPostLogoutRedirectURINewState.sort((a, b) => {\n        if (a.postLogoutRedirectURI > b.postLogoutRedirectURI) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      return newState(state, addClientPostLogoutRedirectURINewState);\n    case AppActions.UPDATE_CLIENTPOSTLOGOUTREDIRECTURI:\n      const updateClientPostLogoutRedirectURINewState = action.clientPostLogoutRedirectURI;\n      const postLogoutRedirectURIToModify = state.find(x => x.id === updateClientPostLogoutRedirectURINewState.id);\n      const indexOfUpdate = state.indexOf(postLogoutRedirectURIToModify);\n      return [...state.slice(0, indexOfUpdate), updateClientPostLogoutRedirectURINewState, ...state.slice(indexOfUpdate + 1, state.length)];\n    case AppActions.REMOVE_CLIENTPOSTLOGOUTREDIRECTURI:\n      const idOfDelete = action.id;\n      const postLogoutRedirectURIToDelete = state.find(x => x.id === idOfDelete);\n      const indexOfDelete = state.indexOf(postLogoutRedirectURIToDelete);\n      return [...state.slice(0, indexOfDelete), ...state.slice(indexOfDelete + 1, state.length)];\n    case AppActions.CLEAR_CLIENTPOSTLOGOUTREDIRECTURIS:\n      return [];\n    default:\n      return state;\n  }\n}\nexport function clientsRedirectURIsreducer(state = [], action) {\n  switch (action.type) {\n    case AppActions.SET_CLIENTREDIRECTURIS:\n      return newState(state, action.clientRedirectURIs);\n    case AppActions.CREATE_CLIENTREDIRECTURI:\n      let addClientRedirectURINewState = state.concat(action.clientRedirectURI);\n      addClientRedirectURINewState = addClientRedirectURINewState.sort((a, b) => {\n        if (a.redirectURI > b.redirectURI) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      return newState(state, addClientRedirectURINewState);\n    case AppActions.UPDATE_CLIENTREDIRECTURI:\n      const updateClientRedirectURINewState = action.clientRedirectURI;\n      const redirectURIToModify = state.find(x => x.id === updateClientRedirectURINewState.id);\n      const indexOfUpdate = state.indexOf(redirectURIToModify);\n      return [...state.slice(0, indexOfUpdate), updateClientRedirectURINewState, ...state.slice(indexOfUpdate + 1, state.length)];\n    case AppActions.REMOVE_CLIENTREDIRECTURI:\n      const idOfDelete = action.id;\n      const redirectURIToDelete = state.find(x => x.id === idOfDelete);\n      const indexOfDelete = state.indexOf(redirectURIToDelete);\n      return [...state.slice(0, indexOfDelete), ...state.slice(indexOfDelete + 1, state.length)];\n    case AppActions.CLEAR_CLIENTREDIRECTURIS:\n      return [];\n    default:\n      return state;\n  }\n}\nexport function clientsCORSOriginsreducer(state = [], action) {\n  switch (action.type) {\n    case AppActions.SET_CLIENTCORSORIGINS:\n      return newState(state, action.clientCORSOrigins);\n    case AppActions.CREATE_CLIENTCORSORIGIN:\n      let addClientCORSOriginNewState = state.concat(action.clientCORSOrigin);\n      addClientCORSOriginNewState = addClientCORSOriginNewState.sort((a, b) => {\n        if (a.originURI > b.originURI) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      return newState(state, addClientCORSOriginNewState);\n    case AppActions.UPDATE_CLIENTCORSORIGIN:\n      const updateClientCORSOriginNewState = action.clientCORSOrigin;\n      const corsOriginToModify = state.find(x => x.id === updateClientCORSOriginNewState.id);\n      const indexOfUpdate = state.indexOf(corsOriginToModify);\n      return [...state.slice(0, indexOfUpdate), updateClientCORSOriginNewState, ...state.slice(indexOfUpdate + 1, state.length)];\n    case AppActions.REMOVE_CLIENTCORSORIGIN:\n      const idOfDelete = action.id;\n      const corsOriginToDelete = state.find(x => x.id === idOfDelete);\n      const indexOfDelete = state.indexOf(corsOriginToDelete);\n      return [...state.slice(0, indexOfDelete), ...state.slice(indexOfDelete + 1, state.length)];\n    case AppActions.CLEAR_CLIENTCORSORIGINS:\n      return [];\n    default:\n      return state;\n  }\n}\nexport function clientsScopesreducer(state = [], action) {\n  switch (action.type) {\n    case AppActions.SET_CLIENTSCOPES:\n      return newState(state, action.clientScopes);\n    case AppActions.CREATE_CLIENTSCOPE:\n      let addClientScopeState = state.concat(action.clientScope);\n      addClientScopeState = addClientScopeState.sort((a, b) => {\n        if (a.scopeName > b.scopeName) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      return newState(state, addClientScopeState);\n    case AppActions.UPDATE_CLIENTSCOPE:\n      const updateClientScopeNewState = action.clientScope;\n      const clientScopeToModify = state.find(x => x.id === updateClientScopeNewState.id);\n      const indexOfUpdate = state.indexOf(clientScopeToModify);\n      return [...state.slice(0, indexOfUpdate), updateClientScopeNewState, ...state.slice(indexOfUpdate + 1, state.length)];\n    case AppActions.REMOVE_CLIENTSCOPE:\n      const idOfDelete = action.id;\n      const clientScopeToDelete = state.find(x => x.id === idOfDelete);\n      const indexOfDelete = state.indexOf(clientScopeToDelete);\n      return [...state.slice(0, indexOfDelete), ...state.slice(indexOfDelete + 1, state.length)];\n    case AppActions.CLEAR_CLIENTSCOPES:\n      return [];\n    default:\n      return state;\n  }\n}\nexport function grantsReducer(state = [], action) {\n  switch (action.type) {\n    case AppActions.SET_GRANTS:\n      return newState(state, action.grants);\n    case AppActions.CREATE_GRANT:\n      let addGrantNewState = state.concat(action.grant);\n      addGrantNewState = addGrantNewState.sort((a, b) => {\n        if (a.grantName > b.grantName) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      return newState(state, addGrantNewState);\n    case AppActions.UPDATE_GRANT:\n      const updateGrantNewState = action.grant;\n      const grantToModify = state.find(x => x.id === updateGrantNewState.id);\n      const indexOfUpdate = state.indexOf(grantToModify);\n      return [...state.slice(0, indexOfUpdate), updateGrantNewState, ...state.slice(indexOfUpdate + 1, state.length)];\n    case AppActions.REMOVE_GRANT:\n      const idOfDelete = action.id;\n      const grantToDelete = state.find(x => x.id === idOfDelete);\n      const indexOfDelete = state.indexOf(grantToDelete);\n      return [...state.slice(0, indexOfDelete), ...state.slice(indexOfDelete + 1, state.length)];\n    case AppActions.CLEAR_GRANTS:\n      return [];\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}