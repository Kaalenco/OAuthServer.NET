{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material';\nimport { BaseComponent } from '../../base.component';\nimport { ClientcreatemodalComponent } from '../../shared/modals/clientcreatemodal/clientcreatemodal.component';\nimport { ConfirmationmodalComponent } from '../../shared/modals/confirmationmodal/confirmationmodal.component';\nlet ClientsComponent = class ClientsComponent extends BaseComponent {\n  constructor(store, router, http, matDialog) {\n    super(store, http, matDialog);\n    this.store = store;\n    this.router = router;\n    this.http = http;\n    this.matDialog = matDialog;\n    this.displayedColumns = ['clientName', 'grantType', 'clientId', 'countPostLogoutRedirectURIs', 'countRedirectURIs', 'removeClient'];\n    this.dataSource = new MatTableDataSource();\n  }\n  ngOnInit() {\n    super.ngOnInit();\n    this.httpService.requestPayload();\n  }\n  assignClients(clients) {\n    super.assignClients(clients);\n    this.dataSource.data = this.clients;\n  }\n  navigateToClient(clientId) {\n    const client = this.clients.find(x => x.id == clientId);\n    const grant = this.getGrant(client.grantId);\n    switch (grant.grantName) {\n      case 'Authorization Code':\n        this.router.navigate(['/client/authorizationcode', clientId]);\n        break;\n      case 'Implicit':\n        this.router.navigate(['/client/implicit', clientId]);\n        break;\n      case 'Resource Owner Password':\n        this.router.navigate(['/client/ropassword', clientId]);\n        break;\n      case 'Client Credentials':\n        this.router.navigate(['/client/clientcredentials', clientId]);\n        break;\n      default:\n        this.router.navigate(['/client']);\n        break;\n    }\n  }\n  createClient() {\n    // Confirmation box\n    const confirmationModalData = {\n      isConfirmed: false,\n      grantId: undefined,\n      grants: this.grants\n    };\n    const clientCreateModal = this.matDialog.open(ClientcreatemodalComponent, {\n      width: '350px',\n      data: confirmationModalData\n    });\n    clientCreateModal.afterClosed().subscribe(result => {\n      if (result !== undefined) {\n        const grant = this.getGrant(result.grantId);\n        switch (grant.grantName) {\n          case 'Authorization Code':\n            this.router.navigate(['/client/authorizationcode']);\n            break;\n          case 'Implicit':\n            this.router.navigate(['/client/implicit']);\n            break;\n          case 'Resource Owner Password':\n            this.router.navigate(['/client/ropassword']);\n            break;\n          case 'Client Credentials':\n            this.router.navigate(['/client/clientcredentials']);\n            break;\n          default:\n            this.router.navigate(['/client']);\n            break;\n        }\n      }\n    });\n  }\n  removeClient(id) {\n    // Confirmation box\n    const confirmationModalData = {\n      title: 'Confirm Delete',\n      message: 'Are you sure you would like to delete this Client?',\n      isConfirmed: false,\n      confirmMessage: 'Confirm',\n      cancelMessage: 'Cancel'\n    };\n    const confirmationModal = this.matDialog.open(ConfirmationmodalComponent, {\n      width: '250px',\n      data: confirmationModalData\n    });\n    confirmationModal.afterClosed().subscribe(result => {\n      if (result !== undefined) {\n        this.http.removeClient(id);\n      }\n    });\n  }\n};\nClientsComponent = __decorate([Component({\n  selector: 'app-clients',\n  templateUrl: './clients.component.html',\n  styleUrls: ['./clients.component.scss']\n})], ClientsComponent);\nexport { ClientsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}