{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material';\nimport { ConfirmationmodalComponent } from 'src/app';\nimport { BaseComponent } from 'src/app/base.component';\nimport { ClientredirecturimodalComponent } from '../modals/clientredirecturimodal/clientredirecturimodal.component';\nlet ClientredirecturisComponent = class ClientredirecturisComponent extends BaseComponent {\n  constructor(store, http, matDialog) {\n    super(store, http, matDialog);\n    this.store = store;\n    this.http = http;\n    this.matDialog = matDialog;\n    this.displayedColumns = ['redirectURI', 'editRedirectURI', 'deleteRedirectURI'];\n    this.dataSource = new MatTableDataSource();\n  }\n  assignRedirectURIs(redirectURIs) {\n    super.assignRedirectURIs(redirectURIs);\n    const selectedClientRedirectURIs = redirectURIs.filter(x => x.clientId === this.clientId);\n    this.dataSource.data = selectedClientRedirectURIs;\n  }\n  addRedirectURI() {\n    const clientRedirectModalData = {\n      isConfirmed: false,\n      redirectURI: undefined,\n      existingRedirectURIs: this.clientsRedirectURIs.filter(x => x.clientId === this.clientId),\n      isCreate: true\n    };\n    const clientRedirectCreateModal = this.matDialog.open(ClientredirecturimodalComponent, {\n      width: '250px',\n      data: clientRedirectModalData\n    });\n    clientRedirectCreateModal.afterClosed().subscribe(result => {\n      if (result !== undefined) {\n        const request = {\n          clientId: this.clientId,\n          redirectURI: result.redirectURI\n        };\n        this.http.createClientRedirectURI(request);\n      }\n    });\n  }\n  editRedirectURI(redirectURI) {\n    const selectedClientRedirectURIs = this.clientsRedirectURIs.filter(x => x.clientId === this.clientId);\n    const selectedRedirectURI = selectedClientRedirectURIs.find(x => x.redirectURI === redirectURI);\n    const clientRedirectModalData = {\n      isConfirmed: false,\n      redirectURI: selectedRedirectURI.redirectURI,\n      existingRedirectURIs: selectedClientRedirectURIs,\n      isCreate: false\n    };\n    const clientRedirectURIEditModal = this.matDialog.open(ClientredirecturimodalComponent, {\n      width: '250px',\n      data: clientRedirectModalData\n    });\n    clientRedirectURIEditModal.afterClosed().subscribe(result => {\n      if (result !== undefined) {\n        const request = {\n          redirectURI: result.redirectURI,\n          id: selectedRedirectURI.id,\n          clientId: this.clientId\n        };\n        this.http.updateClientRedirectURI(request);\n      }\n    });\n  }\n  deleteRedirectURI(redirectURI) {\n    const selectedClientRedirectURIs = this.clientsRedirectURIs.filter(x => x.clientId === this.clientId);\n    const selectedRedirectURI = selectedClientRedirectURIs.find(x => x.redirectURI === redirectURI);\n    const confirmationModalData = {\n      isConfirmed: false,\n      title: 'Confirm Delete',\n      message: `Are you sure you would like to delete the Redirect URI ${redirectURI}?`,\n      cancelMessage: 'Cancel',\n      confirmMessage: 'Confirm'\n    };\n    const confirmationModal = this.matDialog.open(ConfirmationmodalComponent, {\n      width: '250px',\n      data: confirmationModalData\n    });\n    confirmationModal.afterClosed().subscribe(result => {\n      if (result !== undefined) {\n        this.http.removeClientRedirectURI(selectedRedirectURI.id);\n      }\n    });\n  }\n};\n__decorate([Input()], ClientredirecturisComponent.prototype, \"clientId\", void 0);\nClientredirecturisComponent = __decorate([Component({\n  selector: 'app-clientredirecturis',\n  templateUrl: './clientredirecturis.component.html',\n  styleUrls: ['./clientredirecturis.component.scss']\n})], ClientredirecturisComponent);\nexport { ClientredirecturisComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}