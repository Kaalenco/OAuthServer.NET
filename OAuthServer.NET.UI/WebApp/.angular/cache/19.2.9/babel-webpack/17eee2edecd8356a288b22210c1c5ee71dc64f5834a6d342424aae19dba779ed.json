{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BaseIdComponent } from 'src/app/baseId.component';\nlet ClientauthorizationcodeComponent = class ClientauthorizationcodeComponent extends BaseIdComponent {\n  store;\n  http;\n  matDialog;\n  route;\n  router;\n  cacheService;\n  grantId;\n  clientName;\n  clientId;\n  clientSecret;\n  tokenExpirationMin;\n  issuerURI;\n  audience;\n  allowRememberLogin = true;\n  enableExternalLogin = true;\n  enableLocalLogin = true;\n  validateIssuer = true;\n  validateAudience = true;\n  validateCORS = true;\n  validateSigningKey = true;\n  issueRefreshTokens = true;\n  refreshTokenExpirationDays = 7;\n  constructor(store, http, matDialog, route, router, cacheService) {\n    super(store, http, matDialog, route);\n    this.store = store;\n    this.http = http;\n    this.matDialog = matDialog;\n    this.route = route;\n    this.router = router;\n    this.cacheService = cacheService;\n    this.grantId = cacheService.getGrantId();\n  }\n  assignClients(clients) {\n    super.assignClients(clients);\n    let client = this.clients.find(x => x.id == this.id);\n    if (!client) {\n      client = this.clients.find(x => x.clientName === this.clientName);\n    }\n    if (client) {\n      this.id = client.id;\n      this.grantId = client.grantId;\n      this.clientName = client.clientName;\n      this.clientId = client.clientId;\n      this.clientSecret = client.clientSecret;\n      this.tokenExpirationMin = client.tokenExpirationMin;\n      this.issuerURI = client.issuerURI;\n      this.audience = client.audience;\n      this.allowRememberLogin = client.allowRememberLogin;\n      this.enableExternalLogin = client.enableExternalLogin;\n      this.enableLocalLogin = client.enableLocalLogin;\n      this.validateIssuer = client.validateIssuer;\n      this.validateAudience = client.validateAudience;\n      this.validateCORS = client.validateCORS;\n      this.validateSigningKey = client.validateIssuerSigningKey;\n      this.issueRefreshTokens = client.issueRefreshTokens;\n      this.refreshTokenExpirationDays = client.refreshTokenExpirationDays;\n    }\n  }\n  createClient() {\n    // Todo: Validate all data is correct\n    if (this.id && this.id !== '') {\n      const request = {\n        allowRememberLogin: this.allowRememberLogin,\n        enableLocalLogin: this.enableLocalLogin,\n        enableExternalLogin: this.enableExternalLogin,\n        validateAudience: this.validateAudience,\n        validateCORS: this.validateCORS,\n        validateIssuer: this.validateIssuer,\n        clientId: this.clientId,\n        clientName: this.clientName,\n        grantId: this.grantId,\n        tokenExpirationMin: this.tokenExpirationMin,\n        issuerURI: this.issuerURI,\n        audience: this.audience,\n        id: this.id,\n        clientSecret: this.clientSecret,\n        issueRefreshTokens: this.issueRefreshTokens,\n        refreshTokenExpirationDays: this.refreshTokenExpirationDays,\n        validateIssuerSigningKey: this.validateSigningKey\n      };\n      this.http.updateClientAuthorizationCode(request);\n      this.router.navigate(['/']);\n    } else {\n      const request = {\n        allowRememberLogin: this.allowRememberLogin,\n        enableLocalLogin: this.enableLocalLogin,\n        enableExternalLogin: this.enableExternalLogin,\n        validateAudience: this.validateAudience,\n        validateCORS: this.validateCORS,\n        validateIssuer: this.validateIssuer,\n        clientId: this.clientId,\n        clientName: this.clientName,\n        grantId: this.grantId,\n        tokenExpirationMin: this.tokenExpirationMin,\n        issuerURI: this.issuerURI,\n        audience: this.audience,\n        clientSecret: this.clientSecret,\n        issueRefreshTokens: this.issueRefreshTokens,\n        refreshTokenExpirationDays: this.refreshTokenExpirationDays,\n        validateIssuerSigningKey: this.validateSigningKey\n      };\n      this.http.createClientAuthorizationCode(request);\n    }\n  }\n};\nClientauthorizationcodeComponent = __decorate([Component({\n  selector: 'app-clientauthorizationcode',\n  templateUrl: './clientauthorizationcode.component.html',\n  styleUrls: ['./clientauthorizationcode.component.scss']\n})], ClientauthorizationcodeComponent);\nexport { ClientauthorizationcodeComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}