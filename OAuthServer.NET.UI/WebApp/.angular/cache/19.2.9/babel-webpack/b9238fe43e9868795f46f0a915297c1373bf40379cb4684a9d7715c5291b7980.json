{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth/auth.service\";\nexport let Httpinterceptor = /*#__PURE__*/(() => {\n  class Httpinterceptor {\n    authService;\n    constructor(authService) {\n      this.authService = authService;\n    }\n    intercept(request, next) {\n      const accessToken = this.authService.getToken();\n      let updatedRequest;\n      if (accessToken === undefined || accessToken === null || accessToken === '') {\n        updatedRequest = request.clone();\n      } else {\n        updatedRequest = request.clone({\n          headers: request.headers.append('Authorization', 'Bearer ' + accessToken).append('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n        });\n      }\n      return next.handle(updatedRequest).pipe(tap(event => {\n        // log the httpResponse to the browser's console in case of success\n        if (event instanceof HttpResponse) {}\n      }, error => {\n        // log the httpResponse to the browser's console in case of failure\n        if (event instanceof HttpResponse) {}\n      }));\n    }\n    static ɵfac = function Httpinterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Httpinterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n    static ɵprov = (() => /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: Httpinterceptor,\n      factory: Httpinterceptor.ɵfac\n    }))();\n  }\n  return Httpinterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}