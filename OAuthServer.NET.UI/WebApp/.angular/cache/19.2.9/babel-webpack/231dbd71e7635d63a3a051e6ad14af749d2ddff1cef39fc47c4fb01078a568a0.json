{"ast":null,"code":"import { ClearClientCORSOrigins, ClearClientPostLogoutRedirectURIs, ClearClientRedirectURIs, ClearClients, ClearClientScopes, ClearGrants, CreateClient, CreateClientCORSOrigin, CreateClientPostLogoutRedirectURI, CreateClientRedirectURI, CreateClientScope, CreateGrant, RemoveClient, RemoveClientCORSOrigin, RemoveClientPostLogoutRedirectURI, RemoveClientRedirectURI, RemoveClientScope, RemoveGrant, SetClientCORSOrigins, SetClientPostLogoutRedirectURIs, SetClientRedirectURIs, SetClients, SetClientScopes, SetGrants, UpdateClient, UpdateClientCORSOrigin, UpdateClientPostLogoutRedirectURI, UpdateClientRedirectURI, UpdateClientScope, UpdateGrant } from '../reducers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    httpClient;\n    store;\n    _hasPayloadBeenRecevied;\n    constructor(httpClient, store) {\n      this.httpClient = httpClient;\n      this.store = store;\n    }\n    login(login) {\n      return this.httpClient.post('/login', login);\n    }\n    requestPayload() {\n      if (!this._hasPayloadBeenRecevied) {\n        this.httpClient.get('/payload').subscribe(appState => {\n          this._hasPayloadBeenRecevied = true;\n          this.store.dispatch(new SetClients(appState.clients));\n          this.store.dispatch(new SetGrants(appState.grants));\n          this.store.dispatch(new SetClientPostLogoutRedirectURIs(appState.clientsPostLogoutRedirectURIs));\n          this.store.dispatch(new SetClientRedirectURIs(appState.clientsRedirectURIs));\n          this.store.dispatch(new SetClientCORSOrigins(appState.clientsCORSOrigins));\n          this.store.dispatch(new SetClientScopes(appState.clientsScopes));\n        });\n      }\n    }\n    clearPayload() {\n      this._hasPayloadBeenRecevied = false;\n      this.store.dispatch(new ClearClients());\n      this.store.dispatch(new ClearGrants());\n      this.store.dispatch(new ClearClientPostLogoutRedirectURIs());\n      this.store.dispatch(new ClearClientRedirectURIs());\n      this.store.dispatch(new ClearClientCORSOrigins());\n      this.store.dispatch(new ClearClientScopes());\n    }\n    createClientImplicit(request) {\n      this.httpClient.post(`/clients/implicit`, request).subscribe(client => {\n        this.store.dispatch(new CreateClient(client));\n      });\n    }\n    updateClientImplicit(request) {\n      this.httpClient.put(`/clients/implicit/${request.id}`, request).subscribe(client => {\n        this.store.dispatch(new UpdateClient(client));\n      });\n    }\n    createClientAuthorizationCode(request) {\n      this.httpClient.post(`/clients/authorizationcode`, request).subscribe(client => {\n        this.store.dispatch(new CreateClient(client));\n      });\n    }\n    updateClientAuthorizationCode(request) {\n      this.httpClient.put(`/clients/authorizationcode/${request.id}`, request).subscribe(client => {\n        this.store.dispatch(new UpdateClient(client));\n      });\n    }\n    createClientClientCredentials(request) {\n      this.httpClient.post(`/clients/clientcredentials`, request).subscribe(client => {\n        this.store.dispatch(new CreateClient(client));\n      });\n    }\n    updateClientClientCredentials(request) {\n      this.httpClient.put(`/clients/clientcredentials/${request.id}`, request).subscribe(client => {\n        this.store.dispatch(new UpdateClient(client));\n      });\n    }\n    createClientROPassword(request) {\n      this.httpClient.post(`/clients/ropassword`, request).subscribe(client => {\n        this.store.dispatch(new CreateClient(client));\n      });\n    }\n    updateClientROPassword(request) {\n      this.httpClient.put(`/clients/ropassword/${request.id}`, request).subscribe(client => {\n        this.store.dispatch(new UpdateClient(client));\n      });\n    }\n    removeClient(id) {\n      this.httpClient.delete(`/clients/${id}`, {\n        observe: 'response'\n      }).subscribe(result => {\n        if (result.status === 204) {\n          this.store.dispatch(new RemoveClient(id));\n        }\n      });\n    }\n    createClientScope(request) {\n      this.httpClient.post(`/clients/scopes/`, request).subscribe(clientScope => {\n        this.store.dispatch(new CreateClientScope(clientScope));\n      });\n    }\n    updateClientScope(request) {\n      this.httpClient.put(`/clients/scopes/${request.id}`, request).subscribe(clientScope => {\n        this.store.dispatch(new UpdateClientScope(clientScope));\n      });\n    }\n    removeClientScope(id) {\n      this.httpClient.delete(`/clients/scopes/${id}`, {\n        observe: 'response'\n      }).subscribe(result => {\n        if (result.status === 204) {\n          this.store.dispatch(new RemoveClientScope(id));\n        }\n      });\n    }\n    createClientCORSOrigin(request) {\n      this.httpClient.post(`/clients/corsOrigins/`, request).subscribe(clientCORSOrigin => {\n        this.store.dispatch(new CreateClientCORSOrigin(clientCORSOrigin));\n      });\n    }\n    updateClientCORSOrigin(request) {\n      this.httpClient.put(`/clients/corsOrigins/${request.id}`, request).subscribe(clientCORSOrigin => {\n        this.store.dispatch(new UpdateClientCORSOrigin(clientCORSOrigin));\n      });\n    }\n    removeClientCORSOrigin(id) {\n      this.httpClient.delete(`/clients/corsOrigins/${id}`, {\n        observe: 'response'\n      }).subscribe(result => {\n        if (result.status === 204) {\n          this.store.dispatch(new RemoveClientCORSOrigin(id));\n        }\n      });\n    }\n    createClientRedirectURI(request) {\n      this.httpClient.post(`/clients/redirectURIs/`, request).subscribe(clientRedirectURI => {\n        this.store.dispatch(new CreateClientRedirectURI(clientRedirectURI));\n      });\n    }\n    updateClientRedirectURI(request) {\n      this.httpClient.put(`/clients/redirectURIs/${request.id}`, request).subscribe(clientRedirectURI => {\n        this.store.dispatch(new UpdateClientRedirectURI(clientRedirectURI));\n      });\n    }\n    removeClientRedirectURI(id) {\n      this.httpClient.delete(`/clients/redirectURIs/${id}`, {\n        observe: 'response'\n      }).subscribe(result => {\n        if (result.status === 204) {\n          this.store.dispatch(new RemoveClientRedirectURI(id));\n        }\n      });\n    }\n    createClientPostLogoutRedirectURI(request) {\n      this.httpClient.post(`/clients/postLogoutRedirectURIs/`, request).subscribe(clientPostLogoutRedirectURI => {\n        this.store.dispatch(new CreateClientPostLogoutRedirectURI(clientPostLogoutRedirectURI));\n      });\n    }\n    updateClientPostLogoutRedirectURI(request) {\n      this.httpClient.put(`/clients/postLogoutRedirectURIs/${request.id}`, request).subscribe(clientPostLogoutRedirectURI => {\n        this.store.dispatch(new UpdateClientPostLogoutRedirectURI(clientPostLogoutRedirectURI));\n      });\n    }\n    removeClientPostLogoutRedirectURI(id) {\n      this.httpClient.delete(`/clients/postLogoutRedirectURIs/${id}`, {\n        observe: 'response'\n      }).subscribe(result => {\n        if (result.status === 204) {\n          this.store.dispatch(new RemoveClientPostLogoutRedirectURI(id));\n        }\n      });\n    }\n    createGrant(grant) {\n      this.httpClient.post('/grants', grant).subscribe(grant => {\n        if (grant) {\n          this.store.dispatch(new CreateGrant(grant));\n        }\n      });\n    }\n    updateGrant(grant) {\n      this.httpClient.put(`/grants/${grant.id}`, grant, {\n        observe: 'response'\n      }).subscribe(result => {\n        if (result.status === 204) {\n          this.store.dispatch(new UpdateGrant(grant));\n        }\n      });\n    }\n    removeGrant(id) {\n      this.httpClient.delete(`/grants/${id}`, {\n        observe: 'response'\n      }).subscribe(result => {\n        if (result.status === 204) {\n          this.store.dispatch(new RemoveGrant(id));\n        }\n      });\n    }\n    static ɵfac = function HttpService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store));\n    };\n    static ɵprov = (() => /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HttpService,\n      factory: HttpService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return HttpService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}