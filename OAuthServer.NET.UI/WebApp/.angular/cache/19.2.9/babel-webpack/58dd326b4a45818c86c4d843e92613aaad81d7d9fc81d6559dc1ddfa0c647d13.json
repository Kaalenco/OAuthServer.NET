{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material';\nimport { ConfirmationmodalComponent } from 'src/app';\nimport { BaseComponent } from 'src/app/base.component';\nimport { ClientscopemodalComponent } from '../modals/clientscopemodal/clientscopemodal.component';\nlet ClientscopesComponent = class ClientscopesComponent extends BaseComponent {\n  store;\n  http;\n  matDialog;\n  clientId;\n  displayedColumns = ['scopeName', 'editScope', 'deleteScope'];\n  dataSource = (() => new MatTableDataSource())();\n  constructor(store, http, matDialog) {\n    super(store, http, matDialog);\n    this.store = store;\n    this.http = http;\n    this.matDialog = matDialog;\n  }\n  assignScopes(clientScopes) {\n    super.assignScopes(clientScopes);\n    const selectedScopes = clientScopes.filter(x => x.clientId === this.clientId);\n    this.dataSource.data = selectedScopes;\n  }\n  addScope() {\n    const clientScopeModalData = {\n      isConfirmed: false,\n      scopeName: undefined,\n      existingScopes: this.clientsScopes.filter(x => x.clientId === this.clientId),\n      isCreate: true\n    };\n    const clientScopeCreateModal = this.matDialog.open(ClientscopemodalComponent, {\n      width: '250px',\n      data: clientScopeModalData\n    });\n    clientScopeCreateModal.afterClosed().subscribe(result => {\n      if (result !== undefined) {\n        const scope = {\n          clientId: this.clientId,\n          scopeName: result.scopeName\n        };\n        this.http.createClientScope(scope);\n      }\n    });\n  }\n  editScope(scopeName) {\n    const selectedScopes = this.clientsScopes.filter(x => x.clientId === this.clientId);\n    const selectedScope = selectedScopes.find(x => x.scopeName === scopeName);\n    const clientScopeModalData = {\n      isConfirmed: false,\n      scopeName: selectedScope.scopeName,\n      existingScopes: selectedScopes,\n      isCreate: false\n    };\n    const clientScopeEditModal = this.matDialog.open(ClientscopemodalComponent, {\n      width: '250px',\n      data: clientScopeModalData\n    });\n    clientScopeEditModal.afterClosed().subscribe(result => {\n      if (result !== undefined) {\n        const request = {\n          scopeName: result.scopeName,\n          id: selectedScope.id,\n          clientId: this.clientId\n        };\n        this.http.updateClientScope(request);\n      }\n    });\n  }\n  deleteScope(scopeName) {\n    const selectedScopes = this.clientsScopes.filter(x => x.clientId === this.clientId);\n    const selectedScope = selectedScopes.find(x => x.scopeName === scopeName);\n    const confirmationModalData = {\n      isConfirmed: false,\n      title: 'Confirm Delete',\n      message: `Are you sure you would like to delete the scope ${scopeName}?`,\n      cancelMessage: 'Cancel',\n      confirmMessage: 'Confirm'\n    };\n    const confirmationModal = this.matDialog.open(ConfirmationmodalComponent, {\n      width: '250px',\n      data: confirmationModalData\n    });\n    confirmationModal.afterClosed().subscribe(result => {\n      if (result !== undefined) {\n        this.http.removeClientScope(selectedScope.id);\n      }\n    });\n  }\n};\n__decorate([Input()], ClientscopesComponent.prototype, \"clientId\", void 0);\nClientscopesComponent = __decorate([Component({\n  selector: 'app-clientscopes',\n  templateUrl: './clientscopes.component.html',\n  styleUrls: ['./clientscopes.component.scss']\n})], ClientscopesComponent);\nexport { ClientscopesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}